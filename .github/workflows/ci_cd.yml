name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"

      - name: Install dependencies
        run: bundle install
        working-directory: backend/rails-api

      - name: Run RuboCop
        run: bundle exec rubocop
        working-directory: backend/rails-api

      - name: Set up database
        run: bundle exec rails db:setup RAILS_ENV=test
        working-directory: backend/rails-api

      - name: Run tests
        run: bundle exec rails test
        working-directory: backend/rails-api

  deploy:
    if: github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      REACT_APP_BASE_URL: ${{ secrets.REACT_APP_BASE_URL }}
      SOURCE_DIR: "frontend/react-app/build"

      AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
      HOSTNAME_API_1: ${{ secrets.HOSTNAME_API_1 }}
      HOSTNAME_API_2: ${{ secrets.HOSTNAME_API_2 }}
      HOSTNAME_BASTION: ${{ secrets.HOSTNAME_BASTION }}
      USER_NAME: ${{ secrets.USER_NAME }}

    steps:
      - uses: actions/checkout@v3

      - name: Build React app
        run: |
          cd frontend/react-app
          echo "REACT_APP_BASE_URL=${REACT_APP_BASE_URL}" > .env
          npm install
          npm run build

      - name: Deploy React app to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --delete

      - name: Deploy API to Private Server 1
        run: |
          echo "$AWS_PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -o StrictHostKeyChecking=no -i private_key private_key ${USER_NAME}@${HOSTNAME_BASTION}:~/private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME_BASTION} "
            ssh -o StrictHostKeyChecking=no -i ~/private_key ${USER_NAME}@${HOSTNAME_API_1} '
              cd /home/ec2-user/image-searcher/backend &&
              git fetch --all &&
              git reset --hard origin/main &&
              sudo docker compose -f docker-compose-prod.yml down &&
              sudo docker compose -f docker-compose-prod.yml up -d --build
            '
            rm ~/private_key
          "

      - name: Deploy API to Private Server 2
        run: |
          echo "$AWS_PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -o StrictHostKeyChecking=no -i private_key private_key ${USER_NAME}@${HOSTNAME_BASTION}:~/private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME_BASTION} "
            ssh -o StrictHostKeyChecking=no -i ~/private_key ${USER_NAME}@${HOSTNAME_API_2} '
              cd /home/ec2-user/image-searcher/backend &&
              git fetch --all &&
              git reset --hard origin/main &&
              sudo docker compose -f docker-compose-prod.yml down &&
              sudo docker compose -f docker-compose-prod.yml up -d --build
            '
            rm ~/private_key
          "
